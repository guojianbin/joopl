#!/usr/bin/env node

/*
 Copyright Matias Fidemraizer
 http://matiasfidemraizer.com
 http://www.linkedin.com/in/mfidemraizer/en

 jOOPL Dependency Analyzer
 https://github.com/mfidemraizer/joopl

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

var classes = require("./classes.js");
var colors = require("colors");
var program = require("commander");
var watchr = require("watchr");
var version = "1.0.0";

program
    .version(version)
    .option("-w, --watch", "Holds this CLI open and executes the analyzer whenever some file changes within the given base directory")
    .option("-d, --directory <basedir>", "Specifies the base directory from which the analyzer must start the search of JavaScript dependencies")
    .option("-i, --includes", "A semicolon-separated list of other moduleinfo.js to include to current analysis. They can be local paths or HTTP/HTTPS absolute URIs.")
    .option("-q, --quiet", "Quiet mode: no console output")
    .option("-n, --nologo", "Hides jOOPL logo")
    .parse(process.hasOwnProperty("argv") ? process.argv : []);

if(!program.hasOwnProperty("nologo")) {
    console.log("\n*********************************\n");
    console.log("\tjOOPL Analyzer " + version);
    console.log("\thttp://mfidemraizer.github.io/joopl/");
    console.log();
    console.log("\tThis program is distributed under \n\tApache License 2.0\n\t(http://www.apache.org/licenses/LICENSE-2.0.html)\n");
    console.log("\t(c) Matias Fidemraizer\n\t(https://www.linkedin.com/in/mfidemraizer)\n");
    console.log("*********************************\n");
}

if(program.hasOwnProperty("quiet") && program.quiet) {
    classes.Logger.enabled = false;
}

if (!program.hasOwnProperty("directory") || program.directory == "") {
    classes.Logger.default.logAlways("No base directory was given, using current directory...".yellow);

    program.directory = ".";
} else {
    classes.Logger.default.logAlways("Using '%s' as base directory...", program.directory);
}

if (program.hasOwnProperty("includes")) {
    program.includes = program.includes.split(";");
} else {
    program.includes = [];
}

var analyzer = new classes.DependencyAnalyzer();

if(program.hasOwnProperty("watch")) {
    watchr.watch({
        path: program.directory,
        listeners: {
            change: function(changeType, filePath, fileCurrentStat, filePreviousStat) {
                if(filePath.indexOf("moduleinfo.js") == -1) {
                    try {
                        classes.Logger.default.logAlways("File '" + filePath + "' has changed. Starting analyzer...");
                        analyzer.start({ baseDirectory: program.directory });
                    } catch(e) {
                        classes.Logger.default.logError("Parsing failed. Reason: " + e.toString() + ".");
                    }
                }
            }
        }
    });
} else {
    analyzer.start({ baseDirectory: program.directory, includes: program.includes });
}